---

# Copyright (c) 2018 Hexanode
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: "Check if certificate already exists for {{ cert_item.domains | first }}"
  stat:
    path: "/etc/letsencrypt/live/{{ cert_item.domains | first }}/cert.pem"
  register: certificate

- name: Set custom pre and post hook in standalone mode for {{ cert_item.domains | first }}
  set_fact:
    certbot_standalone_gen_command_custom_preposthook: --pre-hook "bash -c \"for service in {{ certbot_standalone_stop_services | join(' ') }} ; systemctl stop \$service ; done\"" --post-hook "bash -c \"for service in {{ certbot_standalone_stop_services | join(' ') }} ; systemctl start \$service ; done\""
  when:
    - not certificate.stat.exists
    - certbot_standalone_stop_services | length > 0

- name: Set custom renew hook in standalone mode for {{ cert_item.domains | first }}
  set_fact:
    certbot_standalone_gen_command_custom_renewhook: --renew-hook "/bin/cat /etc/letsencrypt/live/{{ cert_item.domains | first }}/fullchain.pem /etc/letsencrypt/live/{{ cert_item.domains | first }}/privkey.pem > {{ cert_item.concatenate }}"
  when:
    - not certificate.stat.exists
    - cert_item.concatenate is defined
    - cert_item.concatenate | length > 0

- name: Stop services to let certbot generate a certificate
  service:
    name: "{{ item }}"
    state: stopped
  when:
    - not certificate.stat.exists
    - certbot_standalone_stop_services | length > 0
  with_items: "{{ certbot_standalone_stop_services }}"

- name: "Generate new certificate in standalone mode for {{ cert_item.domains | first }}"
  shell: "{{ certbot_standalone_gen_command }}"
  when:
    - not certificate.stat.exists
    - cert_item.mode is undefined or (cert_item.mode is defined and cert_item.mode == 'standalone')
  register: certificate_generation
  ignore_errors: yes

- name: "Generate new certificate in webroot mode for {{ cert_item.domains | first }}"
  shell: "{{ certbot_webroot_gen_command }}"
  when:
    - not certificate.stat.exists
    - cert_item.mode is defined and cert_item.mode == 'webroot'
  register: certificate_generation
  ignore_errors: yes

- name: Start services after certificates generation
  service:
    name: "{{ item }}"
    state: started
  when:
    - not certificate.stat.exists
    - certbot_standalone_stop_services | length > 0
  with_items: "{{ certbot_standalone_stop_services }}"

- name: "Certificate concatenation for {{ cert_item.domains | first }}"
  shell: "cat /etc/letsencrypt/live/{{ cert_item.domains | first }}/fullchain.pem /etc/letsencrypt/live/{{ cert_item.domains | first }}/privkey.pem > {{ cert_item.concatenate }}"
  when:
    - not certificate.stat.exists
    - cert_item.concatenate is defined
    - cert_item.concatenate | length > 0
    - certificate_generation.rc == 0
